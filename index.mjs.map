{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar ox;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\tif ( ox.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = v;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = u;\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = v;\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Object} `x`\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ( (N-1)*strideX ); // last index\n\tix = fx + strideX;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, v );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - strideX;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, v );\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tjx += strideX;\n\t\t\t}\n\t\t\txset( xbuf, lx, v );\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - strideX;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = xget( xbuf, jx );\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, u );\n\t\t\t\tjx -= strideX;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, v );\n\t\t\tix += strideX;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, strideX ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas-ext-base-gsortins\n*\n* @example\n* import gsortins from '@stdlib/blas-ext-base-gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortins from '@stdlib/blas-ext-base-gsortins';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["gsortins","N","order","x","strideX","offsetX","flg","ix","jx","fx","lx","ox","v","u","i","arraylike2object","accessorProtocol","xbuf","xget","xset","data","accessors","isnan","isNegativeZero","ndarray","stride2offset","setReadOnly","main"],"mappings":"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"}